{"version":3,"sources":["LeftCard.js","RightCard.js","MidCard.js","ActivityCarousel.js","App.js","serviceWorker.js","index.js"],"names":["LeftCard","props","className","style","right","data","divRight","maxHeight","divMaxHeight","maxWidth","divMaxWidth","zIndex","divZIndex","transition","divTransition","filter","imgGrayScale","imgTransition","src","alt","marginLeft","titleMarginLeft","titleTransition","Card","Title","RightCard","AcitvityHomeCarousel","useState","carousel","setCarousel","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","styleObj","MidCard","App","path","ActivityCarousel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.27648d81.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction LeftCard(props) {\n  return (\n    <>\n      <div\n        className=\"position-absolute\"\n        style={{\n          right: props.data.divRight,\n          maxHeight: props.data.divMaxHeight,\n          maxWidth: props.data.divMaxWidth,\n          zIndex: props.data.divZIndex,\n          transition: props.data.divTransition\n        }}\n      >\n        <img\n          style={{\n            filter: \"grayscale(\" + props.data.imgGrayScale + \")\",\n            transition: props.data.imgTransition\n          }}\n          src=\"/images/activity/IMG_6108.jpg\"\n          alt=\"hotactivity_sideKV\"\n        />\n\n        <div\n          style={{\n            marginLeft: props.data.titleMarginLeft,\n            transition: props.data.titleTransition\n          }}\n          className=\"aSideCarouselInfo position-absolute\"\n        >\n          <Card.Title className=\"m-0\">Card Title</Card.Title>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default LeftCard;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction RightCard(props) {\n  return (\n    <>\n      <div\n        className=\"position-absolute\"\n        style={{\n          right: props.data.divRight,\n          maxHeight: props.data.divMaxHeight,\n          maxWidth: props.data.divMaxWidth,\n          zIndex: props.data.divZIndex,\n          transition: props.data.divTransition\n        }}\n      >\n        <img\n          style={{\n            filter: \"grayscale(\" + props.data.imgGrayScale + \")\",\n            transition: props.data.imgTransition\n          }}\n          src=\"/images/activity/smile.jpg\"\n          alt=\"hotactivity_sideKV\"\n        />\n\n        <div\n          style={{\n            marginLeft: props.data.titleMarginLeft,\n            transition: props.data.titleTransition\n          }}\n          className=\"aSideCarouselInfo position-absolute\"\n        >\n          <Card.Title className=\"m-0\">Card Title</Card.Title>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default RightCard;\n","import React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nfunction LeftCard(props) {\n  return (\n    <>\n      <div\n        className=\"position-absolute\"\n        style={{\n          right: props.data.divRight,\n          maxHeight: props.data.divMaxHeight,\n          maxWidth: props.data.divMaxWidth,\n          zIndex: props.data.divZIndex,\n          transition: props.data.divTransition\n        }}\n      >\n        <img\n          style={{\n            filter: \"grayscale(\" + props.data.imgGrayScale + \")\",\n            transition: props.data.imgTransition\n          }}\n          src=\"/images/activity/coding.png\"\n          alt=\"hotactivity_MainKV\"\n        />\n\n        <div\n          style={{\n            marginLeft: props.data.titleMarginLeft,\n            transition: props.data.titleTransition\n          }}\n          className=\"aSideCarouselInfo position-absolute\"\n        >\n          <Card.Title className=\"m-0\">Card Title</Card.Title>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default LeftCard;\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./activity.css\";\r\n\r\nimport LeftCard from \"./LeftCard\";\r\nimport RightCard from \"./RightCard\";\r\nimport MidCard from \"./MidCard\";\r\n\r\nfunction AcitvityHomeCarousel() {\r\n  const [carousel, setCarousel] = useState(0);\r\n\r\n  function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n\r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }\r\n\r\n  useInterval(() => {\r\n    setCarousel(carousel + 1);\r\n  }, 3000);\r\n\r\n  const styleObj = [\r\n    {\r\n      divRight: \"calc(100vw - 600px - 60px)\",\r\n      divMaxHeight: \"400px\",\r\n      divMaxWidth: \"600px\",\r\n      divZIndex: \"99\",\r\n      divTransition: \"3s\",\r\n      imgGrayScale: \"90%\",\r\n      imgTransition: \"0s\",\r\n      titleMarginLeft: \"60px\",\r\n      titleTransition: \"2.3s\"\r\n    },\r\n\r\n    {\r\n      divRight: \"60px\",\r\n      divMaxHeight: \"400px\",\r\n      divMaxWidth: \"600px\",\r\n      divZIndex: \"100\",\r\n      divTransition: \"3s\",\r\n      imgGrayScale: \"90%\",\r\n      imgTransition: \"0s\",\r\n      titleMarginLeft: \"451px\",\r\n      titleTransition: \"2.3s\"\r\n    },\r\n    {\r\n      divRight: \"calc(50vw - 450px)\",\r\n      divMaxHeight: \"600px\",\r\n      divMaxWidth: \"900px\",\r\n      divZIndex: \"101\",\r\n      divTransition: \"3s\",\r\n      imgGrayScale: \"0%\",\r\n      imgTransition: \"0s\",\r\n      titleMarginLeft: \"60px\",\r\n      titleTransition: \"2.3s\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"aKV d-flex justify-content-between position-relative\">\r\n          <LeftCard data={styleObj[carousel % 3]} />\r\n          <RightCard\r\n            data={styleObj[(carousel % 3) + 1 > 2 ? 0 : (carousel % 3) + 1]}\r\n          />\r\n          <MidCard\r\n            data={styleObj[(carousel % 3) - 1 < 0 ? 2 : (carousel % 3) - 1]}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AcitvityHomeCarousel;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport ActivityCarousel from \"./ActivityCarousel\";\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Route path=\"/\">\n          <ActivityCarousel />\n        </Route>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}